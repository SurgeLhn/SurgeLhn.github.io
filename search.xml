<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>windows快捷指令</title>
    <url>/2021/02/17/wiki/windows/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>快速打开windows搜索</td>
<td>win+”Q”</td>
</tr>
<tr>
<td>窗口最小化</td>
<td>win+↓</td>
</tr>
<tr>
<td>窗口最大化</td>
<td>win+↑</td>
</tr>
<tr>
<td>标签页页进行切换</td>
<td>ctrl+Tab</td>
</tr>
<tr>
<td>关闭当前标签页</td>
<td>ctrl+”W”</td>
</tr>
<tr>
<td>重新打开刚刚关闭的页面</td>
<td>ctrl+shift+”T”</td>
</tr>
<tr>
<td>打开新的标签页</td>
<td>ctrl+”T”</td>
</tr>
<tr>
<td>查看浏览器记录</td>
<td>ctrl+”H”</td>
</tr>
<tr>
<td>查找关键字</td>
<td>ctrl+”F”</td>
</tr>
<tr>
<td>到达网址栏</td>
<td>ctrl+”L”</td>
</tr>
<tr>
<td>查看历史记录</td>
<td>ctrl+”H”</td>
</tr>
<tr>
<td>新增浏览器视窗</td>
<td>ctrl+”N”</td>
</tr>
<tr>
<td>切换任务窗口</td>
<td>Alt+Tab</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>wiki</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>快捷指令</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集基本使用</title>
    <url>/2021/02/18/UnionFind/UnionFindBasis/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>对于以下的题目，便是并查集模板的基本用法。</p>
<h2 id="Leetcode547-省份数量"><a href="#Leetcode547-省份数量" class="headerlink" title="Leetcode547.省份数量"></a>Leetcode547.省份数量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://gitee.com/liang_haonan/blogimg/raw/master/img/ufb1.PNG"></p>
<p><a href="https://leetcode-cn.com/problems/number-of-provinces/"><em>点此链接跳转题目</em></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>直接套模板，然后得出连通分量的数量即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;</span><br><span class="line">  <span class="comment">//记录连通分量的个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">  <span class="comment">//节点x指向的节点是parent[x]</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[]parent;</span><br><span class="line">  <span class="comment">/*构造函数，最开始每个节点指向自己*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count=n;</span><br><span class="line">    parent=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      parent[i]=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*将节点p与q连接*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connect(p,q))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> rootP=find(p);</span><br><span class="line">    <span class="keyword">int</span> rootQ=find(q);</span><br><span class="line">    parent[rootP]=rootQ;</span><br><span class="line">    count--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*找到x的根节点*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(parent[x]!=x)</span><br><span class="line">      x=parent[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*查看p与q是否连接*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootP=find(p);</span><br><span class="line">    <span class="keyword">int</span> rootQ=find(q);</span><br><span class="line">    <span class="keyword">return</span> rootP==rootQ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*查看连通分量的个数*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">number</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> N=M.length;</span><br><span class="line">      UF uf=<span class="keyword">new</span> UF(N);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(M[i][j]==<span class="number">1</span>)</span><br><span class="line">            uf.union(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> uf.number();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode839-相似的字符串数组"><a href="#Leetcode839-相似的字符串数组" class="headerlink" title="Leetcode839.相似的字符串数组"></a>Leetcode839.相似的字符串数组</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://gitee.com/liang_haonan/blogimg/raw/master/img/ufb3.PNG"></p>
<p><a href="https://leetcode-cn.com/problems/similar-string-groups/"><em>点此链接跳转题目</em></a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>跟上题一样，每个字符串可以看成一个点，若两个字符串相似便可以看成两个点连接，最后判断连通分量的个数即可。</p>
<p>判断相似的方法，由于是字母异位词(所有单词字母种类数量相同位置不同)，所以只要对应两个位置及以下字母不相同即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSimilar</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=a.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.charAt(i)!=b.charAt(i))</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&lt;=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] rank;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        count=n;</span><br><span class="line">        parent=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        rank=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">            rank[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x!=parent[x])</span><br><span class="line">            x=parent[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(p)==find(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootP=find(p);</span><br><span class="line">        <span class="keyword">int</span> rootQ=find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP==rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(rank[rootP]&lt;rank[rootQ])&#123;</span><br><span class="line">            parent[rootP]=rootQ;</span><br><span class="line">            rank[rootQ]+=rank[rootP];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootQ]=rootP;</span><br><span class="line">            rank[rootP]+=rank[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSimilar</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = a.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.charAt(i) != b.charAt(i)) cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSimilarGroups</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=strs.length;</span><br><span class="line">        UnionFind uf=<span class="keyword">new</span> UnionFind(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isSimilar(strs[i],strs[j]))</span><br><span class="line">                    uf.union(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode737-句子相似性II"><a href="#Leetcode737-句子相似性II" class="headerlink" title="Leetcode737.句子相似性II"></a>Leetcode737.句子相似性II</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="https://gitee.com/liang_haonan/blogimg/raw/master/img/ufb2.PNG"></p>
<p><a href="https://leetcode-cn.com/problems/sentence-similarity-ii/"><em>点此链接跳转题目</em></a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>根据上面的题目一样，将每个字符串当作一个点，如果两个字符串相似那就将对应的点连接到一起。那么如何让每个字符串对应相应的点呢？当然是对<code>pairs</code>每个字符串进行编号。</p>
<p><strong>编号代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用hashMap使每个字符串有对应的编号</span></span><br><span class="line">Map&lt;String,Integer&gt;hashMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//从0开始编号</span></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(List&lt;String&gt;pair:pairs)&#123;</span><br><span class="line">    String a=pair.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//如果已经有编号就放弃</span></span><br><span class="line">    <span class="keyword">if</span>(!hashMap.containsKey(a))&#123;</span><br><span class="line">        hashMap.put(a,index);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    String b=pair.get(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!hashMap.containsKey(b))&#123;</span><br><span class="line">        hashMap.put(b,index);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后只要看<code>words1</code>和<code>words2</code>对应位置的字符串是否相似，即对应位置字符串各自对应的编号是否在同一连通分量里面即可，如果有一个位置不在，那就直接<code>false</code>。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">int</span>[] rank;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        parent=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        rank=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">            rank[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x!=parent[x])</span><br><span class="line">            x=parent[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(p)==find(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootP=find(p);</span><br><span class="line">        <span class="keyword">int</span> rootQ=find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP==rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(rank[rootP]&lt;rank[rootQ])&#123;</span><br><span class="line">            parent[rootP]=rootQ;</span><br><span class="line">            rank[rootQ]+=rank[rootP];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootQ]=rootP;</span><br><span class="line">            rank[rootP]+=rank[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilarTwo</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words1.length!=words2.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;String,Integer&gt;hashMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt;pair:pairs)&#123;</span><br><span class="line">            String a=pair.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(!hashMap.containsKey(a))&#123;</span><br><span class="line">                hashMap.put(a,index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            String b=pair.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!hashMap.containsKey(b))&#123;</span><br><span class="line">                hashMap.put(b,index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        UnionFind unionfind=<span class="keyword">new</span> UnionFind(index);</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt;pair:pairs)&#123;</span><br><span class="line">            String a=pair.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> index0=hashMap.get(a);</span><br><span class="line">            String b=pair.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> index1=hashMap.get(b);</span><br><span class="line">            unionfind.union(index0,index1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len=words1.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            String word1=words1[i]; Integer index0=hashMap.get(word1);</span><br><span class="line">            String word2=words2[i]; Integer index1=hashMap.get(word2);</span><br><span class="line">            <span class="keyword">if</span>(word1.equals(word2))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(index0==<span class="keyword">null</span>||index1==<span class="keyword">null</span>||!unionfind.connected(index0,index1))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上题目的核心思路都是一样的，不同的是第二第三题都是字符串，那么得想办法先进行编号，然后再使用并查集，就会变得十分简单。</p>
]]></content>
      <categories>
        <category>UnionFind</category>
      </categories>
      <tags>
        <tag>UnionFind</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集模板</title>
    <url>/2021/02/16/UnionFind/UnionFindTemplate/</url>
    <content><![CDATA[<h2 id="并查集解决的问题"><a href="#并查集解决的问题" class="headerlink" title="并查集解决的问题"></a>并查集解决的问题</h2><ul>
<li>p与q是否连接</li>
<li>图中连通分量的数量</li>
</ul>
<h2 id="并查集的具体实现"><a href="#并查集的具体实现" class="headerlink" title="并查集的具体实现"></a>并查集的具体实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span><br><span class="line">    <span class="comment">//连通分量的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">//x连接的结点为parent[x]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="comment">//对应的根结点的连通分量的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] rank;</span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        count=n;</span><br><span class="line">        parent=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        rank=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">            rank[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*找寻x的根节点*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x!=parent[x])</span><br><span class="line">            x=parent[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*检查p和q是否连接*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(p)==find(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*将p和q连接在一起*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootP=find(p);</span><br><span class="line">        <span class="keyword">int</span> rootQ=find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP==rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(rank[rootP]&lt;rank[rootQ])&#123;</span><br><span class="line">            parent[rootP]=rootQ;</span><br><span class="line">            rank[rootQ]+=rank[rootP];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootQ]=rootP;</span><br><span class="line">            rank[rootP]+=rank[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*返回连通分量的个数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p>《算法》(第四版) P136-P149</p>
</blockquote>
]]></content>
      <categories>
        <category>UnionFind</category>
      </categories>
      <tags>
        <tag>UnionFind</tag>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
